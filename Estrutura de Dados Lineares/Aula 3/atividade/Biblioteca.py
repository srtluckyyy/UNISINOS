'''
üìã Objetivos:
    Entender como funcionam as pesquisas sequencial e bin√°ria.
    Implementar e testar os algoritmos em Python.
    Analisar as vantagens e desvantagens de cada m√©todo de pesquisa.

üíª Instru√ß√µes:
    Copie o c√≥digo fornecido abaixo e cole no seu editor Python.
    Execute o c√≥digo e observe a sa√≠da no console. Teste a pesquisa sequencial, a pesquisa bin√°ria, e a pesquisa mista.
    Responda √†s perguntas no final da atividade para refletir sobre o desempenho e a aplicabilidade dos m√©todos de pesquisa.

Perguntas para Reflex√£o:
    1. Qual foi a posi√ß√£o do livro "Harry Potter" na lista original usando pesquisa sequencial?
        Na posi√ß√£o 5.
    
    2. Como a posi√ß√£o do livro mudou ao utilizar a pesquisa bin√°ria? Por qu√™?
        Porque foi utilizado a fun√ß√£o sort() para ordenar a lista antes de realizar a pesquisa bin√°ria. Ai a lista mudou para:
        > ['1984', 'A Guerra dos Tronos', 'Cem Anos de Solid√£o', 'Dom Quixote', 'Harry Potter', ...]
        Colocando o livro "Harry Potter" na posi√ß√£o 4 do array.
     
    3. Em qual situa√ß√£o voc√™ acha que a pesquisa sequencial seria mais √∫til do que a pesquisa bin√°ria?
        Quando a lista √© pequena, a pesquisa sequencial √© mais eficiente.

    4. Explique como a pesquisa mista decide qual m√©todo utilizar. Quando voc√™ acha que essa abordagem √© mais vantajosa?
        A pesquisa mista decide qual m√©todo utilizar baseado no tamanho da lista comparando-a com o limite, que por padr√£o √© 5. Se a  lista for pequena, ser√° feita a sequencial, caso contrario ser√° a bin√°ria.
        Acho que s√≥ quando n√£o se tem certeza de qual vai ser o tamanho da lista, ou quando vai ser verificado v√°rias listas de tamanhos diferentes.
'''


# Lista de t√≠tulos de livros (desordenada)
livros = [
    "O Senhor dos An√©is", "1984", "Dom Quixote", 
    "O Pequeno Pr√≠ncipe", "A Guerra dos Tronos", 
    "Harry Potter", "Moby Dick", "Orgulho e Preconceito",
    "O Alquimista", "O C√≥digo Da Vinci", "Cem Anos de Solid√£o"
]

# Fun√ß√£o de Pesquisa Sequencial
def pesquisa_sequencial(lista, valor_procurado):
    print("\nRealizando Pesquisa Sequencial...")
    for i, item in enumerate(lista):
        if item == valor_procurado:
            return i
    return -1

# Fun√ß√£o de Pesquisa Bin√°ria (a lista precisa estar ordenada)
def pesquisa_binaria(lista, valor_procurado):
    print("\nRealizando Pesquisa Bin√°ria...")
    esquerda = 0
    direita = len(lista) - 1
    
    while esquerda <= direita:
        meio = (esquerda + direita) // 2
        if lista[meio] == valor_procurado:
            return meio
        elif lista[meio] < valor_procurado:
            esquerda = meio + 1
        else:
            direita = meio - 1
    return -1

# Fun√ß√£o para combinar Pesquisa Sequencial e Bin√°ria
def pesquisa_mista(lista, valor_procurado, limite_sequencial=5):
    if len(lista) <= limite_sequencial:
        # Para listas pequenas, usa Pesquisa Sequencial
        return pesquisa_sequencial(lista, valor_procurado)
    else:
        # Para listas maiores, usa Pesquisa Bin√°ria ap√≥s ordenar
        lista.sort()  # Ordena a lista antes da pesquisa bin√°ria
        return pesquisa_binaria(lista, valor_procurado)

# Bloco principal de execu√ß√£o
if __name__ == "__main__":
    # Exibir a lista original
    print("Lista original de livros:")
    for livro in livros:
        print(livro)
    
    # T√≠tulo do livro a ser pesquisado
    titulo_procurado = "Harry Potter"
    
    # Teste com Pesquisa Sequencial
    posicao = pesquisa_sequencial(livros, titulo_procurado)
    if posicao != -1:
        print(f"\nT√≠tulo '{titulo_procurado}' encontrado na posi√ß√£o: {posicao} (Pesquisa Sequencial)")
    else:
        print(f"\nT√≠tulo '{titulo_procurado}' n√£o encontrado na lista. (Pesquisa Sequencial)")

    # Teste com Pesquisa Bin√°ria (requer lista ordenada)
    # Ordenando a lista antes de fazer a pesquisa bin√°ria
    livros_ordenados = sorted(livros)
    posicao = pesquisa_binaria(livros_ordenados, titulo_procurado)
    if posicao != -1:
        print(f"\nT√≠tulo '{titulo_procurado}' encontrado na posi√ß√£o: {posicao} (Pesquisa Bin√°ria)")
    else:
        print(f"\nT√≠tulo '{titulo_procurado}' n√£o encontrado na lista. (Pesquisa Bin√°ria)")

    # Teste com Pesquisa Mista
    posicao = pesquisa_mista(livros, titulo_procurado)
    if posicao != -1:
        print(f"\nT√≠tulo '{titulo_procurado}' encontrado na posi√ß√£o: {posicao} (Pesquisa Mista)")
    else:
        print(f"\nT√≠tulo '{titulo_procurado}' n√£o encontrado na lista. (Pesquisa Mista)")
